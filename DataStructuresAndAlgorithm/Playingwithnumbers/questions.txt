Basic Problems:

    Factorial of a Number
        Write a recursive function to compute n! (n factorial).
        Example: factorial(5) → 5 × 4 × 3 × 2 × 1 = 120

    Fibonacci Sequence
        Write a function to find the nth Fibonacci number using recursion.
        Example: fib(5) → 0, 1, 1, 2, 3, 5

    Sum of First N Natural Numbers
        Compute the sum of first n natural numbers using recursion.
        Example: sum(5) → 1 + 2 + 3 + 4 + 5 = 15

    Reverse a String
        Write a recursive function to reverse a given string.
        Example: reverse("hello") → "olleh"

    Check if a String is a Palindrome
        Implement a function that checks if a string reads the same forward and backward.
        Example: "madam" → True, "hello" → False

Intermediate Problems:

    Power of a Number (a^b)
        Write a recursive function to calculate a^b.
        Example: power(2, 3) → 2 × 2 × 2 = 8

    Greatest Common Divisor (GCD) - Euclidean Algorithm
        Implement GCD using recursion.
        Example: gcd(48, 18) → 6

    Binary Search (Recursive Implementation)
        Write a recursive function to search for an element in a sorted array.

    Tower of Hanoi
        Solve the Tower of Hanoi problem for n disks.
        Example: Move 3 disks from A → C using B as auxiliary.

    Count the Number of Digits in a Number

    Example: countDigits(12345) → 5

Advanced Problems:

    Generate All Subsets (Power Set) of a Set

    Example: powerSet({1,2,3}) → { {}, {1}, {2}, {3}, {1,2}, {1,3}, {2,3}, {1,2,3} }

    Permutations of a String or Array

    Example: permute("abc") → ["abc", "acb", "bac", "bca", "cab", "cba"]

    Josephus Problem

    People stand in a circle. Every kth person is eliminated. Find the survivor.

    Sudoku Solver

    Use recursion and backtracking to solve a Sudoku board.

    N-Queens Problem

    Place N queens on an N x N chessboard so that no two queens attack each other.